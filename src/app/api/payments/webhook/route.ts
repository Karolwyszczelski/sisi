// src/app/api/payments/webhook/route.ts
import { NextResponse } from "next/server";
import { createClient } from '@supabase/supabase-js';
import crypto from 'crypto';

// Klient Supabase z uprawnieniami serwera
const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

export async function POST(request: Request) {
  try {
    const body = await request.json();
    console.log("üîî Otrzymano powiadomienie z Przelewy24:", body);

    const { merchantId, posId, sessionId, amount, currency, orderId } = body;

    // Pobierz swoje klucze z .env.local
    const P24_MERCHANT_ID = parseInt(process.env.P24_MERCHANT_ID!);
    const P24_POS_ID = parseInt(process.env.P24_POS_ID!);
    const P24_API_KEY = process.env.P24_API_KEY!;
    const P24_CRC_KEY = process.env.P24_CRC_KEY!;

    // --- Krok 1: Weryfikacja autentyczno≈õci powiadomienia (podpis) ---
    const sign = body.sign;
    const jsonToSign = JSON.stringify({
      merchantId: merchantId,
      posId: posId,
      sessionId: sessionId,
      amount: amount,
      currency: currency,
      orderId: orderId,
      crc: P24_CRC_KEY,
    });
    
    const expectedSign = crypto.createHmac('sha384', P24_API_KEY).update(jsonToSign).digest('hex');

    // To jest podstawowe zabezpieczenie, sprawdzamy czy podpis siƒô zgadza.
    // W nowym API REST weryfikacja odbywa siƒô przez PUT (poni≈ºej),
    // ale warto zostawiƒá tƒô kontrolƒô jako pierwszƒÖ liniƒô obrony.
    if (sign !== expectedSign) {
       console.error("‚ùå B≈ÇƒÖd weryfikacji podpisu powiadomienia (CRC)!");
       return NextResponse.json({ error: "Invalid signature" }, { status: 400 });
    }

    // --- Krok 2: WyciƒÖgniƒôcie ID naszego zam√≥wienia z sessionId ---
    const ourOrderId = sessionId.split('-')[0];
    if (!ourOrderId) {
      throw new Error("Nie znaleziono ID zam√≥wienia w sessionId powiadomienia.");
    }

    // --- Krok 3: AKTYWNA WERYFIKACJA TRANSAKCJI W PRZELEWY24 ---
    console.log(`üì† Weryfikowanie transakcji dla sessionId: ${sessionId} w Przelewy24...`);

    const verificationData = {
      merchantId: P24_MERCHANT_ID,
      posId: P24_POS_ID,
      sessionId: sessionId,
      amount: amount,
      currency: currency,
      orderId: orderId,
      sign: "" // Podpis generujemy poni≈ºej
    };

    const verificationJsonToSign = JSON.stringify({
        sessionId: sessionId,
        orderId: orderId,
        amount: amount,
        currency: currency,
        crc: P24_CRC_KEY
    });
    verificationData.sign = crypto.createHmac('sha384', P24_API_KEY).update(verificationJsonToSign).digest('hex');

    const p24VerificationResponse = await fetch("https://sandbox.przelewy24.pl/api/v1/transaction/verify", {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Basic ' + Buffer.from(`${P24_POS_ID}:${P24_API_KEY}`).toString('base64')
        },
        body: JSON.stringify(verificationData)
    });

    const verificationResult = await p24VerificationResponse.json();

    if (p24VerificationResponse.status !== 200 || verificationResult.data?.status !== "success") {
        console.error("‚ùå Weryfikacja w Przelewy24 nie powiod≈Ça siƒô lub transakcja nie jest op≈Çacona.", verificationResult);
        // Nie aktualizujemy zam√≥wienia, bo p≈Çatno≈õƒá nie jest potwierdzona.
        // Mo≈ºna by tu np. ustawiƒá status "failed".
        await supabaseAdmin.from('orders').update({ status: 'failed' }).eq('id', ourOrderId);
        return NextResponse.json({ error: "Verification failed" }, { status: 400 });
    }
    
    console.log("‚úÖ Weryfikacja w Przelewy24 pomy≈õlna. Status transakcji: success.");

    // --- Krok 4: Aktualizacja statusu zam√≥wienia w naszej bazie ---
    // Robimy to DOPIERO po pomy≈õlnej weryfikacji
    console.log(`Aktualizowanie zam√≥wienia o ID: ${ourOrderId} na status 'placed'...`);

    const { error } = await supabaseAdmin
      .from('orders')
      .update({ status: 'placed' }) // Zmieniamy status na 'op≈Çacone i z≈Ço≈ºone'
      .eq('id', ourOrderId)
      .eq('status', 'pending'); // Dodatkowy warunek, aby nie zaktualizowaƒá ju≈º przetworzonego zam√≥wienia

    if (error) {
      throw new Error(`B≈ÇƒÖd aktualizacji zam√≥wienia w bazie danych: ${error.message}`);
    }

    console.log(`‚úÖ Zam√≥wienie #${ourOrderId} zosta≈Ço pomy≈õlnie op≈Çacone i zaktualizowane w bazie.`);

    // --- Krok 5: Odpowied≈∫ do Przelewy24 ---
    return NextResponse.json({ status: "ok" });

  } catch (error: any) {
    console.error("[P24_WEBHOOK_ERROR]", error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}